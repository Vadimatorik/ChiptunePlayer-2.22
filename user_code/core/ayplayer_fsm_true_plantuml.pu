@startuml

[*] --> init_wdt

state "Инициализация WDT" as init_wdt {
init_wdt : Глобальный объект:					<b>ayplayer_wdt_obj</b>
init_wdt : Структура конфигурации объекта:		<b>ayplayer_wdt_cfg</b>
init_wdt : Стартовый метод:						<b>ayplayer_wdt_init</b>
}


init_wdt --> init_rcc

state "Инициализация RCC" as init_rcc {
	
}

note right of init_wdt
Файлы в проекте:	ayplayer_wdt.сpp 
				ayplayer_wdt.h	

Аварийное поведение исключено
(метод выполнится в любом случае)
end note

init_rcc --> init_gpio

state "Инициализация GPIO" as init_gpio {
init_gpio : Глобальный порт:
init_gpio : Объект глобального порта:								<b>ayplayer_global_port_obj</b>
init_gpio : Структура конфигурации объекта глобального порта:		<b>ayplayer_global_port_cfg</b>
init_gpio : 			
init_gpio : Отдельные выводы (управляемые через регистры):	
init_gpio : <b>lcd_res</b> - Вывод микроконтроллера подключен к выводу сброса LCD. Инвертированный.
init_gpio : <b>lcd_dc</b> - Вывод микроконтроллера подключен к выводу выбора интерпретации пакетов <<Команда/Данные>>, принимаемых LCD по SPI.
init_gpio : <b>lcd_cs</b> - Вывод микроконтроллера подключен к выводу выбора LCD в качестве приемника на шине SPI.
init_gpio :
init_gpio : <b>sd2_cs</b> - Вывод микроконтроллера подключен к выводу выбора системной карты памяти в качестве приемника на шине SPI.
init_gpio : 
init_gpio : <b>spi_audio_st_reg</b> - Вывод микроконтроллера подключен к выводам-защелкам внутренних сдвиговых регистров цифровых потенциометров.
init_gpio :
init_gpio : <b>bdir</b> - Вывод микроконтроллера подключен к выводам выбора направления работы параллельной шины обоих музыкальных сопроцессоров.
init_gpio : <b>bc1</b> - Вывод микроконтроллера подключен к выводам-защелкам приема данных из параллельной шины.
init_gpio : <b>chip_1</b> - Вывод микроконтроллера подключен к транзистору, открывающему подачу питания на первый чип.
init_gpio : <b>chip_2</b> - Вывод микроконтроллера подключен к транзистору, открывающему подачу питания на второй чип.
init_gpio :
init_gpio : <b>pwr_5_v_on</b> - Вывод микроконтроллера подключен к транзистору, открывающему подачу 5 вольт на плату.
init_gpio : <b>pwr_on</b> - Вывод микроконтроллера подключен к транзистору, разрешающему подачу входного напряжения на плату.
init_gpio :
init_gpio : <b>dp_cs_res</b> - Вывод микроконтроллера подключен к выводу выбора цифровых потенциометров в качестве приемника на шине SPI.
init_gpio : <b>shdn</b> - Вывод микроконтроллера подключен к выводу перевода каналов цифрового потенциометра в Z состояние.
init_gpio :
init_gpio : <b>button_in</b> - Вход микроконтроллера, соединенный с общим контактом векторной клавиатуры.
init_gpio :
init_gpio : <b>button_inc</b> - Вход микроконтроллера, соединенный с клавишей увеличения громкости.
init_gpio : <b>button_dec</b> - Вход микроконтроллера, соединенный с клавишей уменьшения громкости.
init_gpio : 
init_gpio : Стартовый метод:										<b>ayplayer_port_init</b>
}

note right of init_gpio
Файлы в проекте:				ayplayer_port.cpp
							ayplayer_port.h	

Аварийное поведение исключено (метод выполнится в любом случае)

Включение тактирования портов, выводы которых планируется 
инициализировать внутри ayplayer_global_port_obj производится
внутри последнего (объекта ayplayer_global_port_obj) автоматически.

В коде программы именование структур производится по шаблону:
ayplayer_NAME_pin_cfg, где NAME - это приведенное в шаге имя.
Пример: lcd_res из описания эквивалентно ayplayer_lcd_res_pin_cfg
в коде.

В коде программы именование объектов отдельные выводы производится по шаблону:
ayplayer_NAME_pin_obj, где NAME - это приведенное в шаге имя.
Пример: lcd_res из описания эквивалентно ayplayer_lcd_res_pin_obj
в коде.
end note


@enduml
