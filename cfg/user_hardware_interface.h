/*
 * Данный фал должен находиться в проекте пользователя без пометки template
 * и включать в себя объявления интрфейса, пример которого дан ниже.
 * В случае использования stm32f2_api бибилиотеки, это указаетлель на stm32_f20x_f21x_spi.h
 *
 * Так же библиотеке необходим класс объекта порта вывода с возможностью установки
 * или сброса вывода. Например, include файла stm32_f20x_f21x_port.h в библоитеке stm32f2_api
 */
#include "stm32_f20x_f21x_include_module_lib.h"

//class spi_base {
//public:
//    constexpr spi_base() {}
//    /*
//     * p_array_tx   -   указатель на массив, который требуется передать
//     *                  по spi. Указатель на 0-й передаваемый байт
//     *                  ( байт, с которого будет начата передача ).
//     * length       -   длина посылки. length != 0! length >= 1!
//     *
//     * ЗАМЕЧАНИЕ: входной прием не ведется!
//     */
//
//    virtual int tx ( void* p_array_tx, uint16_t length, uint32_t timeout_ms ) const = 0;
//
//    /*
//     * p_array_tx   -   указатель на массив, который требуется передать
//     *                  по spi. Указатель на 0-й передаваемый байт
//     *                  ( байт, с которого будет начата передача ).
//     *
//     * p_array_rx   -   указатель на массив, в который будет
//     *                  осуществляться прием по spi.
//     *                  Указатель на 0-й принемаемый байт
//     *                  ( первый пришедший байт ).
//     *
//     * length       -   длина посылки. length != 0! length >= 1!
//     *
//     *
//     * ЗАМЕЧАНИЕ: p_array_tx может быть равен p_array_rx. Тогда
//     * принятые данные перезапишут входные.
//     */
//
//    virtual int tx ( void* p_array_tx, void* p_array_rx, uint16_t length, uint32_t timeout_ms ) const = 0;
//
//   /*
//    * p_array_rx    -   указатель на массив, в который будет
//    *                   осуществляться прием по spi.
//    *                   Указатель на 0-й принемаемый байт
//    *                   ( первый пришедший байт ).
//    *
//    * length        -   колличество принемаемых байт.
//    * value_out     -   значение, которое будет отправляться
//    *                   ( в случае, если SPI мастер ).
//    */
//    virtual int rx ( void* p_array_rx, uint16_t length, uint32_t timeout_ms, uint8_t out_value = 0 ) const = 0;
//    virtual ~spi_base() {}
//};
